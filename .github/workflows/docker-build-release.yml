name: Build, Test and Push Docker Image on Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive  # Initialize pycopilot submodule
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/docker-snap
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true  # Load image locally for testing
        tags: docker-snap:test
        cache-from: type=gha
        
    - name: Create test docker-compose file
      run: |
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        services:
          docker-snap:
            image: docker-snap:test
            ports:
              - "5000:5000"
            environment:
              - IMAGES_FOLDER=/images
              - GALLERY_USERNAME=user
              - GALLERY_PASSWORD=password
              - SECRET_KEY=test-secret-key-for-ci
            volumes:
              - ./sample-images:/images:ro
            healthcheck:
              test: ["CMD", "python", "-c", "import requests; r=requests.get('http://localhost:5000/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
              interval: 10s
              timeout: 5s
              retries: 5
              start_period: 30s
        EOF
        
    - name: Prepare test environment
      run: |
        # Create sample images directory with test files
        mkdir -p sample-images/test-folder
        
        # Create dummy test files to simulate media (use valid small files)
        # Create a minimal 1x1 pixel PNG
        echo -e '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\x0cIDATx\x9cc```\x00\x01\x00\x00\x05\x00\x01\r\n-\xb4\x00\x00\x00\x00IEND\xaeB`\x82' > sample-images/test-image.png
        
        # Create minimal MP4 header for testing
        echo -e 'Test video placeholder - not a real MP4' > sample-images/test-video.mp4
        echo -e 'Test image in folder - not a real PNG' > sample-images/test-folder/nested-image.png
        
        # Create a simple text-based "image" that our gallery can handle
        echo "Simple test content" > sample-images/readme.txt
        
        # List created files for debugging
        echo "Created test files:"
        find sample-images -type f -exec ls -la {} \;
        
        # Make test script executable
        chmod +x test-docker/test-container.sh
        
        # Ensure we're in the right directory
        pwd
        ls -la
        
    - name: Run container tests
      run: |
        # Set environment for testing
        export COMPOSE_FILE=docker-compose.test.yml
        
        # Show current directory and files for debugging
        echo "Current directory: $(pwd)"
        echo "Available files:"
        ls -la
        echo ""
        echo "Sample images:"
        ls -la sample-images/ || true
        echo ""
        
        # Run the test suite with the locally built image
        echo "Starting container tests..."
        ./test-docker/test-container.sh
        
        # Show final logs if tests complete
        echo ""
        echo "=== Final container logs ==="
        docker compose -f $COMPOSE_FILE logs docker-snap --tail=20 || true
        
    - name: Login to Docker Hub
      if: success()  # Only login if tests passed
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      if: success()  # Only push if tests passed
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Update Docker Hub description
      if: success()  # Only update if push was successful
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ secrets.DOCKER_USERNAME }}/docker-snap
        short-description: "Docker Snap - Image and Video Gallery"
        readme-filepath: ./README_DOCKER.md
        
    - name: Test Results Summary
      if: always()  # Run whether tests passed or failed
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ All tests passed! Docker image has been pushed to Docker Hub."
          echo "üê≥ Available tags: ${{ steps.meta.outputs.tags }}"
        else
          echo "‚ùå Tests failed! Docker image was NOT pushed to Docker Hub."
          echo "Please check the test results above and fix any issues before releasing."
        fi
