#!/bin/bash

# Comprehensive Test Suite for docker-snap
# Runs all tests: Python unit tests + Docker container tests

set -e  # Exit on any error

echo "üß™ docker-snap Complete Test Suite"
echo "===================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Test configuration
START_TIME=$(date +%s)
PYTHON_TESTS_PASSED=0
DOCKER_TESTS_PASSED=0
TOTAL_ERRORS=0

# Function to print section headers
print_section() {
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${CYAN}  $1${NC}"
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
}

# Function to handle test results
handle_test_result() {
    local test_name="$1"
    local exit_code="$2"
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $test_name passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $test_name failed (exit code: $exit_code)${NC}"
        ((TOTAL_ERRORS++))
        return 1
    fi
}

# Cleanup function for Docker tests
cleanup_docker() {
    echo -e "${YELLOW}üßπ Cleaning up Docker environment...${NC}"
    docker compose down --remove-orphans 2>/dev/null || true
    rm -f cookies.txt test-response.html api-response.json gallery-response.html 2>/dev/null || true
}

# Set cleanup trap
trap cleanup_docker EXIT

print_section "PHASE 1: PYTHON UNIT TESTS"

# Test 1: Import Tests
echo -e "${BLUE}üîç Test 1.1: Running import tests...${NC}"
if python tests/test_imports.py; then
    handle_test_result "Import tests" 0
    ((PYTHON_TESTS_PASSED++))
else
    handle_test_result "Import tests" 1
    echo -e "${YELLOW}‚ÑπÔ∏è  Note: OpenCV import failures are expected outside Docker environment${NC}"
fi
echo ""

# Test 2: Unit Tests
echo -e "${BLUE}üîß Test 1.2: Running unit tests...${NC}"
# Check if pytest is available, fallback to unittest
if command -v pytest >/dev/null 2>&1; then
    if python -m pytest tests/test_simple.py -v 2>/dev/null; then
        handle_test_result "Unit tests (pytest)" 0
        ((PYTHON_TESTS_PASSED++))
    else
        # Try with unittest as fallback
        echo -e "${YELLOW}‚ö†Ô∏è  pytest failed, trying unittest...${NC}"
        if python -m unittest discover tests/ -v; then
            handle_test_result "Unit tests (unittest)" 0
            ((PYTHON_TESTS_PASSED++))
        else
            handle_test_result "Unit tests" 1
            echo -e "${YELLOW}‚ÑπÔ∏è  Note: Unit test failures may be due to missing dependencies outside Docker${NC}"
        fi
    fi
else
    # Use unittest directly
    if python -m unittest discover tests/ -v; then
        handle_test_result "Unit tests (unittest)" 0
        ((PYTHON_TESTS_PASSED++))
    else
        handle_test_result "Unit tests" 1
        echo -e "${YELLOW}‚ÑπÔ∏è  Note: Unit test failures may be due to missing dependencies outside Docker${NC}"
    fi
fi
echo ""

print_section "PHASE 2: DOCKER CONTAINER TESTS"

# Test 3: Docker Container Test Suite
echo -e "${BLUE}üê≥ Test 2.1: Running comprehensive Docker container tests...${NC}"
echo -e "${YELLOW}‚ÑπÔ∏è  This may take several minutes for the first build...${NC}"
echo ""

# Run the Docker test script
if ./test-docker/test-container.sh; then
    handle_test_result "Docker container test suite" 0
    ((DOCKER_TESTS_PASSED++))
else
    handle_test_result "Docker container test suite" 1
fi
echo ""

print_section "TEST RESULTS SUMMARY"

# Calculate test statistics
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))
TOTAL_TESTS=$((PYTHON_TESTS_PASSED + DOCKER_TESTS_PASSED))

echo -e "${BLUE}üìä Test Statistics:${NC}"
echo -e "   Duration: ${DURATION} seconds"
echo -e "   Python Tests: ${PYTHON_TESTS_PASSED}/2 passed"
echo -e "   Docker Tests: ${DOCKER_TESTS_PASSED}/1 passed"
echo -e "   Total Errors: ${TOTAL_ERRORS}"
echo ""

if [ $TOTAL_ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ ALL TESTS PASSED! üéâ${NC}"
    echo ""
    echo -e "${GREEN}‚ú® docker-snap is ready for production! ‚ú®${NC}"
    echo ""
    echo -e "${BLUE}üìã What was tested:${NC}"
    echo -e "   ‚Ä¢ Python import functionality"
    echo -e "   ‚Ä¢ Unit test coverage"
    echo -e "   ‚Ä¢ Docker build process"
    echo -e "   ‚Ä¢ Container health and startup"
    echo -e "   ‚Ä¢ Web interface functionality"
    echo -e "   ‚Ä¢ API endpoint validation"
    echo -e "   ‚Ä¢ JavaScript module loading"
    echo -e "   ‚Ä¢ Authentication system"
    echo -e "   ‚Ä¢ Performance benchmarks"
    echo ""
    echo -e "${BLUE}üöÄ Next steps:${NC}"
    echo -e "   ‚Ä¢ Deploy with: docker-compose up -d"
    echo -e "   ‚Ä¢ Access at: http://localhost:5000"
    echo -e "   ‚Ä¢ Login with: user / password"
    echo ""
    exit 0
else
    echo -e "${RED}‚ùå Some tests failed (${TOTAL_ERRORS} errors)${NC}"
    echo ""
    echo -e "${YELLOW}üîß Troubleshooting tips:${NC}"
    
    if [ $PYTHON_TESTS_PASSED -lt 2 ]; then
        echo -e "   ‚Ä¢ Python test failures are often due to missing dependencies"
        echo -e "   ‚Ä¢ Install dependencies: pip install -r requirements.txt"
        echo -e "   ‚Ä¢ Some failures are expected outside Docker (e.g., OpenCV)"
    fi
    
    if [ $DOCKER_TESTS_PASSED -lt 1 ]; then
        echo -e "   ‚Ä¢ Docker test failures may indicate container issues"
        echo -e "   ‚Ä¢ Check Docker is running: docker --version"
        echo -e "   ‚Ä¢ Check port 5000 is available: lsof -i :5000"
        echo -e "   ‚Ä¢ Review logs: docker-compose logs"
    fi
    
    echo ""
    echo -e "${BLUE}üìã For detailed logs, check:${NC}"
    echo -e "   ‚Ä¢ Python tests: Run individually in tests/ directory"
    echo -e "   ‚Ä¢ Docker tests: ./test-docker/test-container.sh"
    echo ""
    exit 1
fi